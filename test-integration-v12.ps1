# üöÄ SCRIPT DE PRUEBA - UNIFIED PARALLEL ENGINE V12.0
# Ejecuta pruebas de integraci√≥n y valida el funcionamiento del sistema

Write-Host "üöÄ INICIANDO VALIDACI√ìN DE UNIFIED PARALLEL ENGINE V12.0" -ForegroundColor Green
Write-Host "=" * 80 -ForegroundColor Gray

# Verificar que estamos en el directorio correcto
$projectRoot = "c:\Users\jvr_0\MisProyectos\calculadora-fertilidad-app"
if (!(Test-Path $projectRoot)) {
    Write-Host "‚ùå Error: Directorio del proyecto no encontrado: $projectRoot" -ForegroundColor Red
    exit 1
}

Set-Location $projectRoot
Write-Host "üìÇ Directorio de trabajo: $projectRoot" -ForegroundColor Blue

# Verificar archivos cr√≠ticos
$criticalFiles = @(
    "src\core\workers\UnifiedParallelEngine_V12.ts",
    "src\core\workers\specialized\pathology_detectionWorker.ts",
    "src\core\workers\specialized\treatment_validationWorker.ts", 
    "src\core\workers\specialized\biomarker_monitoringWorker.ts",
    "src\core\workers\specialized\calculation_engineWorker.ts",
    "src\core\workers\specialized\risk_assessmentWorker.ts",
    "src\core\workers\specialized\validation_engineWorker.ts",
    "src\core\workers\specialized\cache_optimizationWorker.ts",
    "src\core\workers\specialized\streaming_analysisWorker.ts",
    "src\core\calculatorIntegration.ts",
    "src\core\test-integration.ts"
)

Write-Host "`nüîç VERIFICANDO ARCHIVOS CR√çTICOS:" -ForegroundColor Yellow
foreach ($file in $criticalFiles) {
    if (Test-Path $file) {
        $fileInfo = Get-Item $file
        $sizeKB = [math]::Round($fileInfo.Length / 1KB, 1)
        Write-Host "‚úÖ $file ($sizeKB KB)" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file (NO ENCONTRADO)" -ForegroundColor Red
    }
}

# Verificar estructura de workers
Write-Host "`nüìÅ ESTRUCTURA DE WORKERS:" -ForegroundColor Yellow
$workersDir = "src\core\workers\specialized"
if (Test-Path $workersDir) {
    $workerFiles = Get-ChildItem $workersDir -Filter "*.ts" | ForEach-Object { $_.Name }
    Write-Host "üìÇ Directorio: $workersDir" -ForegroundColor Blue
    foreach ($worker in $workerFiles) {
        Write-Host "  üîß $worker" -ForegroundColor Cyan
    }
    Write-Host "üìä Total de workers: $($workerFiles.Count)" -ForegroundColor Green
} else {
    Write-Host "‚ùå Directorio de workers no encontrado: $workersDir" -ForegroundColor Red
}

# Verificar package.json y dependencias principales
Write-Host "`nüì¶ VERIFICANDO PACKAGE.JSON:" -ForegroundColor Yellow
if (Test-Path "package.json") {
    $packageJson = Get-Content "package.json" | ConvertFrom-Json
    Write-Host "‚úÖ Nombre del proyecto: $($packageJson.name)" -ForegroundColor Green
    Write-Host "‚úÖ Versi√≥n: $($packageJson.version)" -ForegroundColor Green
    
    # Verificar dependencias cr√≠ticas
    $criticalDeps = @("react", "react-native", "expo", "@types/node", "typescript")
    Write-Host "üîç Dependencias cr√≠ticas:" -ForegroundColor Blue
    foreach ($dep in $criticalDeps) {
        if ($packageJson.dependencies.$dep -or $packageJson.devDependencies.$dep) {
            $version = $packageJson.dependencies.$dep -or $packageJson.devDependencies.$dep
            Write-Host "  ‚úÖ $dep: $version" -ForegroundColor Green
        } else {
            Write-Host "  ‚ö†Ô∏è $dep: NO ENCONTRADO" -ForegroundColor Yellow
        }
    }
} else {
    Write-Host "‚ùå package.json no encontrado" -ForegroundColor Red
}

# Verificar TypeScript configuration
Write-Host "`n‚öôÔ∏è VERIFICANDO CONFIGURACI√ìN TYPESCRIPT:" -ForegroundColor Yellow
if (Test-Path "tsconfig.json") {
    Write-Host "‚úÖ tsconfig.json encontrado" -ForegroundColor Green
    try {
        $tsConfig = Get-Content "tsconfig.json" | ConvertFrom-Json
        Write-Host "‚úÖ Target: $($tsConfig.compilerOptions.target)" -ForegroundColor Green
        Write-Host "‚úÖ Module: $($tsConfig.compilerOptions.module)" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è Error leyendo tsconfig.json (puede tener comentarios)" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚ùå tsconfig.json no encontrado" -ForegroundColor Red
}

# Intentar compilaci√≥n TypeScript (si est√° disponible)
Write-Host "`nüî® VERIFICANDO COMPILACI√ìN:" -ForegroundColor Yellow
try {
    # Verificar si TypeScript est√° instalado
    $tscVersion = & npx tsc --version 2>$null
    if ($tscVersion) {
        Write-Host "‚úÖ TypeScript disponible: $tscVersion" -ForegroundColor Green
        
        # Intentar compilar sin emitir archivos (solo verificar errores)
        Write-Host "üîç Verificando errores de compilaci√≥n..." -ForegroundColor Blue
        $compileResult = & npx tsc --noEmit --skipLibCheck 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Compilaci√≥n exitosa - No se encontraron errores de TypeScript" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è Se encontraron errores de compilaci√≥n:" -ForegroundColor Yellow
            Write-Host $compileResult -ForegroundColor Gray
        }
    } else {
        Write-Host "‚ö†Ô∏è TypeScript no disponible - saltando verificaci√≥n de compilaci√≥n" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è No se pudo verificar la compilaci√≥n TypeScript" -ForegroundColor Yellow
}

# Estad√≠sticas de c√≥digo
Write-Host "`nüìä ESTAD√çSTICAS DEL C√ìDIGO:" -ForegroundColor Yellow
$tsFiles = Get-ChildItem -Path "src" -Filter "*.ts" -Recurse
$tsxFiles = Get-ChildItem -Path "src" -Filter "*.tsx" -Recurse
$allCodeFiles = $tsFiles + $tsxFiles

$totalLines = 0
$totalSize = 0

foreach ($file in $allCodeFiles) {
    $content = Get-Content $file.FullName -Raw
    $lines = ($content -split "`n").Count
    $totalLines += $lines
    $totalSize += $file.Length
}

Write-Host "üìÅ Archivos TypeScript: $($tsFiles.Count)" -ForegroundColor Cyan
Write-Host "üìÅ Archivos React: $($tsxFiles.Count)" -ForegroundColor Cyan
Write-Host "üìä Total l√≠neas de c√≥digo: $totalLines" -ForegroundColor Green
Write-Host "üíæ Tama√±o total: $([math]::Round($totalSize / 1MB, 2)) MB" -ForegroundColor Green

# Verificar workers espec√≠ficamente
Write-Host "`nüîß AN√ÅLISIS DE WORKERS ESPECIALIZADOS:" -ForegroundColor Yellow
$workerStats = @()

$workerFiles = @(
    "pathology_detectionWorker.ts",
    "treatment_validationWorker.ts",
    "biomarker_monitoringWorker.ts", 
    "calculation_engineWorker.ts",
    "risk_assessmentWorker.ts",
    "validation_engineWorker.ts",
    "cache_optimizationWorker.ts",
    "streaming_analysisWorker.ts"
)

foreach ($worker in $workerFiles) {
    $filePath = "src\core\workers\specialized\$worker"
    if (Test-Path $filePath) {
        $content = Get-Content $filePath -Raw
        $lines = ($content -split "`n").Count
        $size = (Get-Item $filePath).Length
        
        # Buscar patrones espec√≠ficos
        $hasProcessMethod = $content -match "async process\("
        $hasExports = $content -match "export (class|interface|type)"
        $hasTypeScript = $content -match ": Promise<"
        
        $status = if ($hasProcessMethod -and $hasExports -and $hasTypeScript) { "‚úÖ COMPLETO" } else { "‚ö†Ô∏è INCOMPLETO" }
        
        Write-Host "üîß $worker" -ForegroundColor Cyan
        Write-Host "  üìä $lines l√≠neas, $([math]::Round($size / 1KB, 1)) KB" -ForegroundColor Gray
        Write-Host "  $status" -ForegroundColor $(if ($status.StartsWith("‚úÖ")) { "Green" } else { "Yellow" })
        
        $workerStats += @{
            Name = $worker
            Lines = $lines
            Size = $size
            HasProcess = $hasProcessMethod
            HasExports = $hasExports
            HasTypeScript = $hasTypeScript
            Status = $status
        }
    } else {
        Write-Host "‚ùå $worker - NO ENCONTRADO" -ForegroundColor Red
    }
}

# Resumen final
Write-Host "`n" + "=" * 80 -ForegroundColor Gray
Write-Host "üìã RESUMEN DE VALIDACI√ìN:" -ForegroundColor Green
Write-Host "=" * 80 -ForegroundColor Gray

$completeWorkers = $workerStats | Where-Object { $_.Status.StartsWith("‚úÖ") }
$incompleteWorkers = $workerStats | Where-Object { $_.Status.StartsWith("‚ö†Ô∏è") }

Write-Host "‚úÖ Workers completos: $($completeWorkers.Count)/$($workerFiles.Count)" -ForegroundColor Green
Write-Host "‚ö†Ô∏è Workers incompletos: $($incompleteWorkers.Count)" -ForegroundColor Yellow

if ($completeWorkers.Count -eq $workerFiles.Count) {
    Write-Host "üéâ TODOS LOS WORKERS EST√ÅN COMPLETOS!" -ForegroundColor Green
    Write-Host "üöÄ UnifiedParallelEngine V12.0 est√° listo para usar" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è Algunos workers necesitan completarse" -ForegroundColor Yellow
}

# L√≠neas totales en workers
$totalWorkerLines = ($workerStats | Measure-Object -Property Lines -Sum).Sum
Write-Host "üìä Total l√≠neas en workers: $totalWorkerLines" -ForegroundColor Cyan
Write-Host "üìä Promedio por worker: $([math]::Round($totalWorkerLines / $workerFiles.Count, 0)) l√≠neas" -ForegroundColor Cyan

# Recomendaciones finales
Write-Host "`nüéØ PR√ìXIMOS PASOS RECOMENDADOS:" -ForegroundColor Green
Write-Host "1. üß™ Ejecutar pruebas de integraci√≥n con: npm run test:integration" -ForegroundColor White
Write-Host "2. üöÄ Probar la aplicaci√≥n en modo desarrollo: npm start" -ForegroundColor White
Write-Host "3. üìä Monitorear m√©tricas de rendimiento durante el uso" -ForegroundColor White
Write-Host "4. üîß Ajustar configuraci√≥n de workers seg√∫n necesidades" -ForegroundColor White

Write-Host "`n‚úÖ VALIDACI√ìN COMPLETADA" -ForegroundColor Green
Write-Host "Unified Parallel Engine V12.0 integrado exitosamente" -ForegroundColor Cyan
