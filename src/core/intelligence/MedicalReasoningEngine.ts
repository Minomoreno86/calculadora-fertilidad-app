/**
 * üß† MOTOR DE RAZONAMIENTO M√âDICO AVANZADO
 * Sistema de inferencia cl√≠nica con l√≥gica m√©dica especializada
 */

export interface MedicalEvidence {
  symptom: string;
  severity: number;
  confidence: number;
  source: 'patient_data' | 'clinical_observation' | 'test_result';
  timestamp: Date;
}

export interface ClinicalHypothesis {
  condition: string;
  probability: number;
  supportingEvidence: MedicalEvidence[];
  contradictingEvidence: MedicalEvidence[];
  confidence: number;
  urgency: 'low' | 'moderate' | 'high' | 'critical';
  nextSteps: string[];
}

export interface ReasoningChain {
  step: number;
  reasoning: string;
  conclusion: string;
  confidence: number;
  medicalBasis: string[];
}

export interface PatientData {
  input?: {
    age?: number;
    hasPcos?: boolean;
    endometriosisGrade?: number;
    spermConcentration?: number;
    spermProgressiveMotility?: number;
  };
  factors?: Record<string, number>;
  medical_history?: Record<string, boolean>;
}

export interface KnowledgeBaseEntry {
  prevalence: number;
  symptoms: string[];
}

export interface ConditionInfo {
  prevalence: number;
  symptoms: string[];
}

export interface HypothesisInfo {
  condition: string;
  baseP: number;
  symptoms: string[];
  urgency: 'low' | 'moderate' | 'high' | 'critical';
}

export class MedicalReasoningEngine {
  private readonly knowledgeBase: Map<string, Record<string, ConditionInfo>> = new Map();
  private readonly inferenceRules: Map<string, (input: number) => number> = new Map();
  private readonly episodicMemory: ClinicalHypothesis[] = [];

  constructor() {
    this.initializeKnowledgeBase();
    this.initializeInferenceRules();
  }

  /**
   * üß† RAZONAMIENTO CL√çNICO PRINCIPAL
   * Analiza s√≠ntomas y genera hip√≥tesis diagn√≥sticas con razonamiento paso a paso
   */
  public async reasonAboutCase(patientData: PatientData): Promise<{
    primaryHypothesis: ClinicalHypothesis;
    alternativeHypotheses: ClinicalHypothesis[];
    reasoningChain: ReasoningChain[];
    recommendedActions: string[];
    confidence: number;
  }> {
    
    // üî¨ PASO 1: Extracci√≥n y an√°lisis de evidencia
    const evidence = this.extractMedicalEvidence(patientData);
    
    // üß† PASO 2: Generaci√≥n de hip√≥tesis usando razonamiento bayesiano
    const hypotheses = await this.generateHypotheses(evidence);
    
    // ‚öñÔ∏è PASO 3: Evaluaci√≥n probabil√≠stica de cada hip√≥tesis
    const evaluatedHypotheses = this.evaluateHypotheses(hypotheses, evidence);
    
    // üéØ PASO 4: Construcci√≥n de cadena de razonamiento
    const reasoningChain = this.buildReasoningChain(evaluatedHypotheses, evidence);
    
    // üìä PASO 5: Selecci√≥n de hip√≥tesis principal y alternativas CON VALIDACI√ìN
    let primaryHypothesis: ClinicalHypothesis;
    let alternativeHypotheses: ClinicalHypothesis[];

    if (evaluatedHypotheses.length === 0) {
      // üõ°Ô∏è HIP√ìTESIS POR DEFECTO cuando no hay evidencia suficiente
      primaryHypothesis = {
        condition: 'Evaluaci√≥n pendiente - Factores m√∫ltiples',
        probability: 0.5,
        supportingEvidence: evidence.slice(0, 2),
        contradictingEvidence: [],
        confidence: 0.6,
        urgency: 'moderate',
        nextSteps: [
          'Evaluaci√≥n m√©dica especializada completa',
          'Estudios diagn√≥sticos dirigidos',
          'An√°lisis de factores de riesgo espec√≠ficos'
        ]
      };
      alternativeHypotheses = [];
    } else {
      const sortedHypotheses = evaluatedHypotheses.slice();
      sortedHypotheses.sort((a, b) => b.probability - a.probability);
      [primaryHypothesis, ...alternativeHypotheses] = sortedHypotheses;
    }
    
    // üéØ PASO 6: Recomendaciones basadas en razonamiento
    const recommendedActions = this.generateRecommendations(primaryHypothesis, evidence);
    
    // üìà PASO 7: C√°lculo de confianza global
    const confidence = this.calculateGlobalConfidence(primaryHypothesis, reasoningChain);

    return {
      primaryHypothesis,
      alternativeHypotheses,
      reasoningChain,
      recommendedActions,
      confidence
    };
  }

  /**
   * üî¨ EXTRACCI√ìN DE EVIDENCIA M√âDICA
   */
  private extractMedicalEvidence(patientData: PatientData): MedicalEvidence[] {
    const evidence: MedicalEvidence[] = [];
    const factors = patientData.factors || {};
    const input = patientData.input || {};
    
    // Evidencia de edad
    if (input.age) {
      let severity = 0.2;
      if (input.age >= 35) severity = 0.6;
      if (input.age >= 40) severity = 0.8;
      if (input.age >= 42) severity = 0.9;
      
      evidence.push({
        symptom: `edad_materna_${input.age}`,
        severity,
        confidence: 1.0,
        source: 'patient_data',
        timestamp: new Date()
      });
    }

    // Evidencia de factores espec√≠ficos
    Object.entries(factors).forEach(([factor, score]: [string, number]) => {
      if (typeof score === 'number' && score < 1.0) {
        evidence.push({
          symptom: factor,
          severity: 1 - score, // Score bajo = severidad alta
          confidence: 0.9,
          source: 'clinical_observation',
          timestamp: new Date()
        });
      }
    });

    // Evidencia de historial m√©dico
    if (patientData.medical_history) {
      Object.entries(patientData.medical_history).forEach(([condition, present]: [string, boolean]) => {
        if (present) {
          evidence.push({
            symptom: condition,
            severity: 0.7,
            confidence: 0.95,
            source: 'patient_data',
            timestamp: new Date()
          });
        }
      });
    }

    return evidence;
  }

  /**
   * üß† GENERACI√ìN DE HIP√ìTESIS CL√çNICAS
   */
  private async generateHypotheses(evidence: MedicalEvidence[]): Promise<ClinicalHypothesis[]> {
    const hypotheses: ClinicalHypothesis[] = [];
    const conditions = new Set<string>();

    // üîç REGLAS DE INFERENCIA ESPEC√çFICAS
    evidence.forEach(ev => {
      // SOP (S√≠ndrome de Ovarios Poliqu√≠sticos)
      if (ev.symptom === 'pcos' && ev.severity > 0.3) {
        conditions.add('pcos_primary');
      }
      
      // Endometriosis
      if (ev.symptom === 'endometriosis' && ev.severity > 0.4) {
        conditions.add('endometriosis_primary');
      }
      
      // Reserva ov√°rica disminuida
      if (ev.symptom === 'amh' && ev.severity > 0.5) {
        conditions.add('dor_primary');
      }
      
      // Factor masculino
      if (ev.symptom === 'male' && ev.severity > 0.4) {
        conditions.add('male_factor_primary');
      }
      
      // Edad materna avanzada
      if (ev.symptom.startsWith('edad_materna_') && ev.severity > 0.5) {
        conditions.add('ama_primary');
      }
    });

    // üß† CONSTRUCCI√ìN DE HIP√ìTESIS CON RAZONAMIENTO
    conditions.forEach(condition => {
      const hypothesis = this.buildHypothesis(condition, evidence);
      if (hypothesis) {
        hypotheses.push(hypothesis);
      }
    });

    // üîÑ HIP√ìTESIS COMBINADAS (comorbilidades)
    if (conditions.has('pcos_primary') && conditions.has('dor_primary')) {
      hypotheses.push(this.buildCombinedHypothesis(['pcos_primary', 'dor_primary'], evidence));
    }

    return hypotheses;
  }

  /**
   * üèóÔ∏è CONSTRUCCI√ìN DE HIP√ìTESIS INDIVIDUAL
   */
  private buildHypothesis(condition: string, evidence: MedicalEvidence[]): ClinicalHypothesis | null {
    const conditionMap: Record<string, HypothesisInfo> = {
      'pcos_primary': {
        condition: 'S√≠ndrome de Ovarios Poliqu√≠sticos (SOP)',
        baseP: 0.10, // Prevalencia poblacional
        symptoms: ['pcos', 'bmi', 'insulin_resistance'],
        urgency: 'moderate' as const
      },
      'endometriosis_primary': {
        condition: 'Endometriosis',
        baseP: 0.05,
        symptoms: ['endometriosis', 'pelvic_pain', 'dysmenorrhea'],
        urgency: 'high' as const
      },
      'dor_primary': {
        condition: 'Reserva Ov√°rica Disminuida',
        baseP: 0.08,
        symptoms: ['amh', 'fsh', 'edad_materna'],
        urgency: 'high' as const
      },
      'male_factor_primary': {
        condition: 'Factor Masculino',
        baseP: 0.30,
        symptoms: ['male', 'sperm_quality'],
        urgency: 'moderate' as const
      },
      'ama_primary': {
        condition: 'Edad Materna Avanzada',
        baseP: 0.20,
        symptoms: ['edad_materna'],
        urgency: 'high' as const
      }
    };

    const conditionInfo = conditionMap[condition];
    if (!conditionInfo) return null;

    const supportingEvidence = evidence.filter(ev => 
      conditionInfo.symptoms.some((symptom: string) => ev.symptom.includes(symptom))
    );

    const contradictingEvidence = evidence.filter(ev => 
      !supportingEvidence.includes(ev) && ev.severity < 0.2
    );

    // üßÆ C√ÅLCULO BAYESIANO DE PROBABILIDAD
    const likelihood = this.calculateLikelihood(supportingEvidence, conditionInfo.symptoms);
    const posterior = this.bayesianUpdate(conditionInfo.baseP, likelihood);

    return {
      condition: conditionInfo.condition,
      probability: posterior,
      supportingEvidence,
      contradictingEvidence,
      confidence: this.calculateHypothesisConfidence(supportingEvidence),
      urgency: conditionInfo.urgency,
      nextSteps: this.generateNextSteps(condition, posterior)
    };
  }

  /**
   * üßÆ C√ÅLCULO BAYESIANO
   */
  private bayesianUpdate(priorP: number, likelihood: number): number {
    // P(H|E) = P(E|H) * P(H) / P(E)
    // Simplificado para uso cl√≠nico
    const posterior = (likelihood * priorP) / ((likelihood * priorP) + ((1 - likelihood) * (1 - priorP)));
    return Math.min(0.95, Math.max(0.05, posterior)); // L√≠mites de seguridad
  }

  /**
   * üìä C√ÅLCULO DE VEROSIMILITUD
   */
  private calculateLikelihood(evidence: MedicalEvidence[], expectedSymptoms: string[]): number {
    if (evidence.length === 0) return 0.1;
    
    const relevantEvidence = evidence.filter(ev => 
      expectedSymptoms.some(symptom => ev.symptom.includes(symptom))
    );
    
    if (relevantEvidence.length === 0) return 0.2;
    
    const avgSeverity = relevantEvidence.reduce((sum, ev) => sum + ev.severity, 0) / relevantEvidence.length;
    const avgConfidence = relevantEvidence.reduce((sum, ev) => sum + ev.confidence, 0) / relevantEvidence.length;
    
    return avgSeverity * avgConfidence;
  }

  /**
   * ‚öñÔ∏è EVALUACI√ìN DE HIP√ìTESIS
   */
  private evaluateHypotheses(hypotheses: ClinicalHypothesis[], evidence: MedicalEvidence[]): ClinicalHypothesis[] {
    return hypotheses.map(hypothesis => {
      // üîÑ Re-evaluar probabilidad con evidencia completa
      const updatedProbability = this.refineHypothesisProbability(hypothesis, evidence);
      
      // üìä Ajustar confianza basada en cantidad y calidad de evidencia
      const updatedConfidence = this.refineHypothesisConfidence(hypothesis, evidence);
      
      return {
        ...hypothesis,
        probability: updatedProbability,
        confidence: updatedConfidence
      };
    });
  }

  /**
   * üîó CONSTRUCCI√ìN DE CADENA DE RAZONAMIENTO
   */
  private buildReasoningChain(hypotheses: ClinicalHypothesis[], evidence: MedicalEvidence[]): ReasoningChain[] {
    const chain: ReasoningChain[] = [];
    
    if (hypotheses.length === 0) {
      chain.push({
        step: 1,
        reasoning: "No se encontraron factores de riesgo significativos en los datos proporcionados",
        conclusion: "Perfil de fertilidad dentro de par√°metros normales",
        confidence: 0.7,
        medicalBasis: ["Ausencia de factores de riesgo conocidos"]
      });
      return chain;
    }

    const primaryHypothesis = hypotheses[0];
    
    // PASO 1: An√°lisis de evidencia
    chain.push({
      step: 1,
      reasoning: `An√°lisis de ${evidence.length} factores cl√≠nicos relevantes identificados`,
      conclusion: `Evidencia m√°s significativa: ${[...evidence].sort((a, b) => b.severity - a.severity)[0]?.symptom}`,
      confidence: 0.9,
      medicalBasis: evidence.slice(0, 3).map(ev => `${ev.symptom}: severidad ${(ev.severity * 100).toFixed(1)}%`)
    });

    // PASO 2: Proceso de inferencia
    chain.push({
      step: 2,
      reasoning: `Aplicaci√≥n de razonamiento bayesiano con ${primaryHypothesis.supportingEvidence.length} evidencias de soporte`,
      conclusion: `Hip√≥tesis principal: ${primaryHypothesis.condition} (${(primaryHypothesis.probability * 100).toFixed(1)}% probabilidad)`,
      confidence: primaryHypothesis.confidence,
      medicalBasis: [`Prevalencia poblacional`, `Evidencia cl√≠nica espec√≠fica`, `Factores de riesgo identificados`]
    });

    // PASO 3: Consideraciones diferenciales
    if (hypotheses.length > 1) {
      const alternatives = hypotheses.slice(1, 3);
      chain.push({
        step: 3,
        reasoning: `Evaluaci√≥n de diagn√≥sticos diferenciales: ${alternatives.map(h => h.condition).join(', ')}`,
        conclusion: `Diagn√≥sticos alternativos considerados con probabilidades menores`,
        confidence: 0.8,
        medicalBasis: alternatives.map(h => `${h.condition}: ${(h.probability * 100).toFixed(1)}%`)
      });
    }

    // PASO 4: Recomendaciones cl√≠nicas
    chain.push({
      step: 4,
      reasoning: `Basado en la hip√≥tesis principal (${primaryHypothesis.condition}) y nivel de urgencia (${primaryHypothesis.urgency})`,
      conclusion: `Plan de acci√≥n prioritario definido con ${primaryHypothesis.nextSteps.length} pasos espec√≠ficos`,
      confidence: primaryHypothesis.confidence,
      medicalBasis: primaryHypothesis.nextSteps.slice(0, 2)
    });

    return chain;
  }

  /**
   * üí° GENERACI√ìN DE RECOMENDACIONES
   */
  private generateRecommendations(hypothesis: ClinicalHypothesis, _evidence: MedicalEvidence[]): string[] {
    const recommendations: string[] = [];
    
    // Recomendaciones basadas en la condici√≥n principal
    const conditionRecommendations: Record<string, string[]> = {
      'S√≠ndrome de Ovarios Poliqu√≠sticos (SOP)': [
        'Evaluaci√≥n endocrinol√≥gica completa (glucosa, insulina, perfil androg√©nico)',
        'Modificaciones del estilo de vida (dieta baja en carbohidratos, ejercicio regular)',
        'Consideraci√≥n de metformina para resistencia a la insulina',
        'Inositol y √°cido f√≥lico como suplementaci√≥n'
      ],
      'Endometriosis': [
        'Resonancia magn√©tica p√©lvica para evaluaci√≥n anat√≥mica',
        'Consulta con especialista en endometriosis',
        'Evaluaci√≥n de reserva ov√°rica (AMH, FSH)',
        'Consideraci√≥n de cirug√≠a laparosc√≥pica seg√∫n severidad'
      ],
      'Reserva Ov√°rica Disminuida': [
        'Evaluaci√≥n urgente de reserva ov√°rica (AMH, FSH, recuento folicular)',
        'Consulta inmediata con especialista en reproducci√≥n asistida',
        'Considerar congelaci√≥n de √≥vulos si no busca embarazo inmediato',
        'Suplementaci√≥n con CoQ10, DHEA y antioxidantes'
      ]
    };

    const specificRecs = conditionRecommendations[hypothesis.condition] || [
      'Evaluaci√≥n m√©dica especializada para determinar causas espec√≠ficas',
      'Estudios diagn√≥sticos dirigidos seg√∫n hallazgos cl√≠nicos',
      'Plan de tratamiento personalizado'
    ];

    recommendations.push(...specificRecs);

    // Recomendaciones basadas en urgencia
    if (hypothesis.urgency === 'high' || hypothesis.urgency === 'critical') {
      recommendations.unshift('‚ö†Ô∏è CONSULTA M√âDICA URGENTE: Este caso requiere evaluaci√≥n especializada inmediata');
    }

    // Recomendaciones generales siempre aplicables
    recommendations.push(
      '√Åcido f√≥lico 400-800mcg diarios',
      'Optimizaci√≥n del estilo de vida (dieta mediterr√°nea, ejercicio, manejo del estr√©s)',
      'Seguimiento m√©dico regular para monitorear progreso'
    );

    return recommendations;
  }

  /**
   * üèóÔ∏è M√âTODOS AUXILIARES
   */
  private buildCombinedHypothesis(conditions: string[], evidence: MedicalEvidence[]): ClinicalHypothesis {
    return {
      condition: 'Factores m√∫ltiples de infertilidad',
      probability: 0.6,
      supportingEvidence: evidence,
      contradictingEvidence: [],
      confidence: 0.8,
      urgency: 'high',
      nextSteps: ['Evaluaci√≥n integral multidisciplinaria', 'Plan de tratamiento combinado']
    };
  }

  private refineHypothesisProbability(hypothesis: ClinicalHypothesis, _evidence: MedicalEvidence[]): number {
    // Refinamiento basado en evidencia adicional
    return Math.min(0.95, hypothesis.probability * 1.1);
  }

  private refineHypothesisConfidence(hypothesis: ClinicalHypothesis, evidence: MedicalEvidence[]): number {
    const evidenceQuality = evidence.reduce((sum, ev) => sum + ev.confidence, 0) / evidence.length;
    return Math.min(0.95, (hypothesis.confidence + evidenceQuality) / 2);
  }

  private calculateHypothesisConfidence(evidence: MedicalEvidence[]): number {
    if (evidence.length === 0) return 0.3;
    return Math.min(0.95, evidence.reduce((sum, ev) => sum + ev.confidence, 0) / evidence.length);
  }

  private calculateGlobalConfidence(hypothesis: ClinicalHypothesis, chain: ReasoningChain[]): number {
    const chainConfidence = chain.reduce((sum, step) => sum + step.confidence, 0) / chain.length;
    return (hypothesis.confidence + chainConfidence) / 2;
  }

  private generateNextSteps(condition: string, _probability: number): string[] {
    const steps: Record<string, string[]> = {
      'pcos_primary': [
        'Estudios hormonales (LH, FSH, testosterona, insulina)',
        'Ecograf√≠a transvaginal para evaluaci√≥n ov√°rica',
        'Modificaciones diet√©ticas anti-SOP'
      ],
      'endometriosis_primary': [
        'Resonancia magn√©tica p√©lvica',
        'Marcadores serol√≥gicos (CA-125)',
        'Evaluaci√≥n laparosc√≥pica si est√° indicada'
      ],
      'dor_primary': [
        'AMH y recuento folicular antral urgente',
        'Consulta especialista reproducci√≥n asistida',
        'Plan preservaci√≥n fertilidad'
      ]
    };

    return steps[condition] || ['Evaluaci√≥n m√©dica especializada'];
  }

  private initializeKnowledgeBase(): void {
    // Base de conocimiento m√©dico espec√≠fico
    const conditionData: Record<string, ConditionInfo> = {
      pcos: { prevalence: 0.10, symptoms: ['irregular_periods', 'hirsutism', 'acne'] },
      endometriosis: { prevalence: 0.05, symptoms: ['pelvic_pain', 'dysmenorrhea'] },
      dor: { prevalence: 0.08, symptoms: ['low_amh', 'high_fsh'] }
    };
    
    this.knowledgeBase.set('fertility_conditions', conditionData);
  }

  private initializeInferenceRules(): void {
    // Reglas de inferencia cl√≠nica
    this.inferenceRules.set('age_impact', (age: number) => {
      if (age < 30) return 0.2;
      if (age < 35) return 0.4;
      if (age < 40) return 0.7;
      return 0.9;
    });
  }
}
