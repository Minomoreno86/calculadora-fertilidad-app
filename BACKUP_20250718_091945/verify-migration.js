// ===================================================================
// üß™ VERIFICACI√ìN R√ÅPIDA: useCalculatorFormOptimized
// ===================================================================

console.log('üß™ VERIFICANDO useCalculatorFormOptimized...');

// Verificar que el archivo existe y es v√°lido
try {
  const fs = require('fs');
  const path = require('path');
  
  const optimizedHookPath = path.join(__dirname, 'src/presentation/features/calculator/useCalculatorFormOptimized.ts');
  
  if (fs.existsSync(optimizedHookPath)) {
    console.log('‚úÖ useCalculatorFormOptimized.ts existe');
    
    const content = fs.readFileSync(optimizedHookPath, 'utf8');
    
    // Verificar caracter√≠sticas clave
    const hasReportKey = content.includes('REPORT_KEY_PREFIX') && content.includes('Date.now()');
    const hasAsyncStorage = content.includes('AsyncStorage.setItem');
    const hasNavigation = content.includes('router.push');
    const hasParamsNavigation = content.includes('params:');
    
    console.log('üîç CARACTER√çSTICAS VERIFICADAS:');
    console.log(`  - Generaci√≥n de reportKey: ${hasReportKey ? '‚úÖ' : '‚ùå'}`);
    console.log(`  - Guardado en AsyncStorage: ${hasAsyncStorage ? '‚úÖ' : '‚ùå'}`);
    console.log(`  - Navegaci√≥n: ${hasNavigation ? '‚úÖ' : '‚ùå'}`);
    console.log(`  - Navegaci√≥n con par√°metros: ${hasParamsNavigation ? '‚úÖ' : '‚ùå'}`);
    
    if (hasReportKey && hasAsyncStorage && hasNavigation && hasParamsNavigation) {
      console.log('üéâ TODAS LAS CARACTER√çSTICAS REQUERIDAS PRESENTES');
    } else {
      console.log('‚ö†Ô∏è ALGUNAS CARACTER√çSTICAS FALTANTES');
    }
    
  } else {
    console.log('‚ùå useCalculatorFormOptimized.ts no encontrado');
  }
  
  // Verificar que los archivos obsoletos fueron eliminados
  const obsoleteFiles = [
    'src/presentation/features/calculator/useCalculatorForm.ts',
    'src/presentation/features/calculator/useCalculatorFormModular.ts'
  ];
  
  console.log('\nüßπ VERIFICANDO LIMPIEZA:');
  obsoleteFiles.forEach(file => {
    const filePath = path.join(__dirname, file);
    if (fs.existsSync(filePath)) {
      console.log(`  - ${file}: ‚ö†Ô∏è TODAV√çA EXISTE (deber√≠a eliminarse)`);
    } else {
      console.log(`  - ${file}: ‚úÖ ELIMINADO`);
    }
  });
  
  // Verificar imports en archivo principal
  const mainAppPath = path.join(__dirname, 'app/(app)/index.tsx');
  if (fs.existsSync(mainAppPath)) {
    const mainAppContent = fs.readFileSync(mainAppPath, 'utf8');
    
    console.log('\nüîç VERIFICANDO IMPORTS EN APP PRINCIPAL:');
    if (mainAppContent.includes('useCalculatorFormOptimized')) {
      console.log('  - Import actualizado: ‚úÖ useCalculatorFormOptimized');
    } else if (mainAppContent.includes('useCalculatorForm')) {
      console.log('  - Import: ‚ö†Ô∏è Todav√≠a usa useCalculatorForm (revisar)');
    } else {
      console.log('  - Import: ‚ùå No se encuentra import del hook');
    }
  }
  
  console.log('\nüéØ RESUMEN DE MIGRACI√ìN:');
  console.log('La migraci√≥n a useCalculatorFormOptimized incluye:');
  console.log('  1. ‚úÖ Generaci√≥n autom√°tica de reportKey');
  console.log('  2. ‚úÖ Guardado en AsyncStorage');
  console.log('  3. ‚úÖ Navegaci√≥n con par√°metros');
  console.log('  4. ‚úÖ Compatibilidad con useReportLoader');
  console.log('\nüöÄ El problema "No reportKey found" deber√≠a estar resuelto');
  
} catch (error) {
  console.error('‚ùå Error durante verificaci√≥n:', error);
}
